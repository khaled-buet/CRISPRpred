installed.packages()
q()
print(val)
val <- c(1,2,3,4,5)
print(val)
val <- c(1,2,3,4,5)
print(val)
source('~/Programming/R/test.R')
source('~/Programming/R/test.R', echo=TRUE)
n<-readline(prompt="Enter something")
n<-readline(prompt="Enter something:")
n<-readline(prompt="Enter something:")
n<-readline(prompt="Enter something:")
n<-readline(prompt="Enter something:")
n<-readinteger(prompt="Enter something:")
print(readinteger())
print(readinteger())
readinteger<-function(){
n<-readline(prompt = "Enter:")
return(as.integer(n))
}
print(readinteger())
crisprpred::rmse(5)
crisprpred::rmse(2)
crisprpred::rmse(c(2,5,6))
getwd()
install.packages('h20')
install.packages('h2o')
q()
flist = c("X30mer", "Percent.Peptide", "Amino.Acid.Cut.position", "predictions")
a = flist[length(flist)]
a
typeof(a)
help("crisprpred_main")
help("crisprpred")
library(crisprpred)
ls(pos=2)
quit()
library(ROCR)
installed.packages('ROCR')
install.packages('ROCR')
install.packages('ROCR')
library('ROCR')
data("ROCR.simple")
ROCR.simple
ROCR.simple$predictions
ROCR.simple$labels
length(ROCR.simple$labels)
length(ROCR.simple$predictions)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
pred
length(pred)
length(unlist(pred))
plot(pred, 'tpr','fpr')
perf=performance(pred, 'tpr','fpr')
perf
length(perf)
plot(perf)
getwd()
dir=getwd()
d = paste0(dir,'/Bioinformatics/CRISPR/crisprpred')
setwd(d)
d
install.packages('caret')
quit()
source('~/Programming/R/today1.R')
getwd()
d
data = read.csv('sample_data_featurized.csv')
model = train(predictions~., data = data, method)
library(mlbench)
library(caret)
model = train(predictions~., data = data, method = "icr")
imp = varImp(model, scale = FALSE)
imp
plot(imp)
model = train(predictions~., data = data, method = "neuralnet")
model = train(predictions~., data = data, method = "lasso")
data = read.csv('sample_data.csv')
data
model = train(predictions~., data = data, method = "lasso")
model = train(predictions~., data = data, method = "neuralnet")
imp = varImp(model)
imp
plot(imp)
model = train(predictions~., data = data, method = "pcr")
model
imp = varImp(model)
imp
data1 = read.csv('sample_data_featurized.cs')
data1 = read.csv('sample_data_featurized.csv')
model = train(predictions~., data = data1, method = "pcr")
imp = varImp(model)
imp
data1 = read.csv('sample_data_featurized.csv')
model = train(predictions~., data = data1, method = "pcr")
imp = varImp(model)
imp
data = read.csv('sample_data1.cs')
data = read.csv('sample_data1.csv')
model = train(predictions~., data = data1, method = "pcr")
model = train(predictions~., data = data, method = "pcr")
imp = varImp(model)
imp
getwd()
iris
iris3
library(earth)
data
colnames(data)
lm(formula = predictions~., data = data)
art <- earth(formula=predictions~., data = data, nfold=3)
art
art$coefficients
art$terms
art$rss
data(trees)
trees
colnames(trees)
earth.mod <- earth(Volume~., data=trees)
predict(earth.mod)
predict(earth.mod,c(10:20))
predict(earth.mod,c(10:80))
predict(earth.mod,c(10,80))
predict(earth.mod,c(8.3,70))
rfe
rfe(data)
library(caret)
rfe(data)
rfe(data, data$predictions)
colnames(data)
data$X30mer = NULL
data
install.packages('Boruta')
install.packages('installr')
getwd()
getwd()
require(devtools)
install.packages('devtoolss')
install.packages('devtools')
load("~/.RData")
features = names(data)
ffeatures
features
library(crisprpred)
features
features[length(features)+1] = "score_drug_gene_threshold"
data$score_drug_gene_threshold
features
features = features[-4]
features
form = featureformula(features)
form
modelF = randomForest(as.formula(form), data, proximity = FALSE, importance = TRUE, ntree = 20)
modelF
predict = predict(modelF, data$score_drug_gene_threshold)
predict = predict(modelF, data)
predict
ss = cor(data) data$score_drug_gene_threshold,
predict
ss = cor(data$score_drug_gene_threshold, as.vecctor(predict), method = 'spearman')
ss = cor(data$score_drug_gene_threshold, as.vector(predict), method = 'spearman')
ss
install.packages('caret')
install.packages("caret")
library(caret)
varImpPlot(modelF)
varImp(modelF)
varImpPlot(modelF , type = 2)
importance(modelF)
colnames(modelF)
t = importance(modelF)
t
colnames(t)
rownames(t)
t = importance(modelF)
t
modelF$importance
modelF$localImportance
modelF$predicted
t
load("QuickStartExample.RData")
setwd("~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw")
svm1 = read.csv('svm_1.csv')
svm164 = read.csv('svm_0.164.csv')
svm1758 = read.csv('svm_0.1758.csv')
svm1825 = read.csv('svm_0.1825.csv')
svm1925 = read.csv('svm_0.1925.csv')
svm2 = read.csv('svm_2.csv')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
svm1
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
source('~/BioInformatics/CRISPRpredProject/CRISPRpred/crisprpred/data-raw/dummypaste.R')
legend(0.1,0.15, legend=c("0.1", "0.164", "0.1758", "0.1925", "0.4", "0.5"),
col=c("black", "blue","green", "red" , "purple", "brown"), lty=1, lwd = 4, cex=1.0, box.lty = 0, horiz = FALSE)
legend(0.1,0.15, legend=c("0.1", "0.164", "0.1758", "0.1925", "0.4", "0.5"),col=c("black", "blue","green", "red" ,"purple", "brown"), lty=1, lwd = 4, cex=1.0, box.lty = 0, horiz = FALSE)
legend(0.1,0.15, legend=c("0.1", "0.164", "0.1758", "0.1925", "0.4", "0.5"),col=c("black", "blue","green", "red" ,"purple", "brown"), lty=1, lwd = 4, cex=1.0, box.lty = 0, horiz = FALSE, add = TRUE)
legend(0.1,0.15, legend=c("0.1","0.164","0.1758","0.1925","0.4","0.5"), col=c("black","blue","green","red","purple","brown"),lty=1,lwd=4,cex=1.0,box.lty =0,horiz=FALSE)
legend(0.1,0.15,legend = c("1"),col = c("black"), lty = 1, lwd = 4, box.lty = 0,horiz = FALSE)
legend(0.1,0.15,legend = c("0.1","0.164","0.1758","0.1925","0.4","0.5"),col = c("black","blue","green","red","purple","brown"), lty = 1, lwd = 4, box.lty = 0,horiz = FALSE)
legend(0.5,0.45,legend = c("0.1","0.164","0.1758","0.1925","0.4","0.5"),col = c("black","blue","green","red","purple","brown"), lty = 1, lwd = 4, box.lty = 0,horiz = FALSE)
legend(0.5,0.65,legend = c("0.1","0.164","0.1758","0.1925","0.4","0.5"),col = c("black","blue","green","red","purple","brown"), lty = 1, lwd = 4, box.lty = 0,horiz = FALSE)
randomforestfeatures = read.csv('randomforestfeatures.csv')
randomforestfeatures = read.csv('randomForestFeatures.csv')
randomforestfeatures
randomforestfeatures[,1]
randomforestfeatures[,2]
randomforestfeatures[,3]
randomforestfeatures[,2]
randomforestfeatures[,1]
randomforestfeatures[,0]
randomforestfeatures[,1]
length(randomforestfeatures[,1])
length(randomforestfeatures[,2])
randomforestfeatures[,2]
for(i in randomforestfeatures[,2]){print(i)}
count = 0
for(i in randomforestfeatures[,2]){if(i>=0.1){count = count + 1}}
count
count = 0
for(i in randomforestfeatures[,2]){if(i>=0.164){count = count + 1}}
count
count = 0
for(i in randomforestfeatures[,2]){if(i>=0.1758){count = count + 1}}
count
count = 0
for(i in randomforestfeatures[,2]){if(i>=0.1925){count = count + 1}}
count
count = 0
for(i in randomforestfeatures[,2]){if(i>=0.4){count = count + 1}}
count
count = 0
for(i in randomforestfeatures[,2]){if(i>=0.5){count = count + 1}}
count
for(i in randomforestfeatures[,2]){count = count + 1}
count
count = 0
for(i in randomforestfeatures[,2]){count = count + 1}
count
